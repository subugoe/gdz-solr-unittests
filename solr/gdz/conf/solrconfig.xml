<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
     For more details about configurations options that may appear in
     this file, see http://wiki.apache.org/solr/SolrConfigXml.
-->
<config>
    <!-- In all configuration below, a prefix of "solr." for class names
         is an alias that causes solr to search appropriate packages,
         including org.apache.solr.(search|update|request|core|analysis)

         You may also specify a fully qualified Java classname if you
         have your own custom plugins.
      -->

    <!-- Controls what version of Lucene various components of Solr
         adhere to.  Generally, you want to use the latest version to
         get all bug fixes and improvements. It is highly recommended
         that you fully re-index after changing this setting as it can
         affect both how text is indexed and queried.
    -->
    <luceneMatchVersion>6.5.1</luceneMatchVersion>

    <!-- <lib/> directives can be used to instruct Solr to load any Jars
         identified and use them to resolve any "plugins" specified in
         your solrconfig.xml or schema.xml (ie: Analyzers, Request
         Handlers, etc...).

         All directories and paths are resolved relative to the
         instanceDir.

         Please note that <lib/> directives are processed in the order
         that they appear in your solrconfig.xml file, and are "stacked"
         on top of each other when building a ClassLoader - so if you have
         plugin jars with dependencies on other jars, the "lower level"
         dependency jars should be loaded first.

         If a "./lib" directory exists in your instanceDir, all files
         found in it are included as if you had used the following
         syntax...

                <lib dir="./lib" />
      -->

    <!-- A 'dir' option by itself adds any files found in the directory
         to the classpath, this is useful for including all jars in a
         directory.

         When a 'regex' is specified in addition to a 'dir', only the
         files in that directory which completely match the regex
         (anchored on both ends) will be included.

         If a 'dir' option (with or without a regex) is used and nothing
         is found that matches, a warning will be logged.

         The examples below can be used to load some solr-contribs along
         with their external dependencies.
      -->
    <lib dir="${solr.install.dir:../../..}/contrib/extraction/lib" regex=".*\.jar"/>
    <lib dir="${solr.install.dir:../../..}/dist/" regex="solr-cell-\d.*\.jar"/>

    <lib dir="${solr.install.dir:../../..}/contrib/clustering/lib/" regex=".*\.jar"/>
    <lib dir="${solr.install.dir:../../..}/dist/" regex="solr-clustering-\d.*\.jar"/>

    <lib dir="${solr.install.dir:../../..}/contrib/langid/lib/" regex=".*\.jar"/>
    <lib dir="${solr.install.dir:../../..}/dist/" regex="solr-langid-\d.*\.jar"/>

    <lib dir="${solr.install.dir:../../..}/contrib/velocity/lib" regex=".*\.jar"/>
    <lib dir="${solr.install.dir:../../..}/dist/" regex="solr-velocity-\d.*\.jar"/>

    <!-- an exact 'path' can be used instead of a 'dir' to specify a
         specific jar file.  This will cause a serious error to be logged
         if it can't be loaded.
      -->
    <!--
       <lib path="../a-jar-that-does-not-exist.jar" />
    -->

    <!-- Data Directory

         Used to specify an alternate directory to hold all index data
         other than the default ./data under the Solr home.  If
         replication is in use, this should match the replication
         configuration.
      -->
    <dataDir>${solr.data.dir:}</dataDir>


    <!-- The DirectoryFactory to use for indexes.

         solr.StandardDirectoryFactory is filesystem
         based and tries to pick the best implementation for the current
         JVM and platform.  solr.NRTCachingDirectoryFactory, the default,
         wraps solr.StandardDirectoryFactory and caches small files in memory
         for better NRT performance.

         One can force a particular implementation via solr.MMapDirectoryFactory,
         solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory.

         solr.RAMDirectoryFactory is memory based, not
         persistent, and doesn't work with replication.
      -->
    <directoryFactory name="DirectoryFactory"
                      class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}">


        <!-- These will be used if you are using the solr.HdfsDirectoryFactory,
             otherwise they will be ignored. If you don't plan on using hdfs,
             you can safely remove this section. -->
        <!-- The root directory that collection data should be written to. -->
        <str name="solr.hdfs.home">${solr.hdfs.home:}</str>
        <!-- The hadoop configuration files to use for the hdfs client. -->
        <str name="solr.hdfs.confdir">${solr.hdfs.confdir:}</str>
        <!-- Enable/Disable the hdfs cache. -->
        <str name="solr.hdfs.blockcache.enabled">${solr.hdfs.blockcache.enabled:true}</str>
        <!-- Enable/Disable using one global cache for all SolrCores.
             The settings used will be from the first HdfsDirectoryFactory created. -->
        <str name="solr.hdfs.blockcache.global">${solr.hdfs.blockcache.global:true}</str>

    </directoryFactory>

    <!-- The CodecFactory for defining the format of the inverted index.
         The default implementation is SchemaCodecFactory, which is the official Lucene
         index format, but hooks into the schema to provide per-field customization of
         the postings lists and per-document values in the fieldType element
         (postingsFormat/docValuesFormat). Note that most of the alternative implementations
         are experimental, so if you choose to customize the index format, its a good
         idea to convert back to the official format e.g. via IndexWriter.addIndexes(IndexReader)
         before upgrading to a newer version to avoid unnecessary reindexing.
    -->
    <codecFactory class="solr.SchemaCodecFactory"/>

    <!-- To enable dynamic schema REST APIs, use the following for <schemaFactory>:

         <schemaFactory class="ManagedIndexSchemaFactory">
           <bool name="mutable">true</bool>
           <str name="managedSchemaResourceName">managed-schema</str>
         </schemaFactory>

         When ManagedIndexSchemaFactory is specified, Solr will load the schema from
         he resource named in 'managedSchemaResourceName', rather than from schema.xml.
         Note that the managed schema resource CANNOT be named schema.xml.  If the managed
         schema does not exist, Solr will create it after reading schema.xml, then rename
         'schema.xml' to 'schema.xml.bak'.

         Do NOT hand edit the managed schema - external modifications will be ignored and
         overwritten as a result of schema modification REST API calls.

         When ManagedIndexSchemaFactory is specified with mutable = true, schema
         modification REST API calls will be allowed; otherwise, error responses will be
         sent back for these requests.
    -->
    <schemaFactory class="ClassicIndexSchemaFactory"/>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         Index Config - These settings control low-level behavior of indexing
         Most example settings here show the default value, but are commented
         out, to more easily see where customizations have been made.

         Note: This replaces <indexDefaults> and <mainIndex> from older versions
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <indexConfig>
        <!-- maxFieldLength was removed in 4.0. To get similar behavior, include a
             LimitTokenCountFilterFactory in your fieldType definition. E.g.
         <filter class="solr.LimitTokenCountFilterFactory" maxTokenCount="10000"/>
        -->
        <!-- Maximum time to wait for a write lock (ms) for an IndexWriter. Default: 1000 -->
        <writeLockTimeout>30000</writeLockTimeout>

        <!-- The maximum number of simultaneous threads that may be
             indexing documents at once in IndexWriter; if more than this
             many threads arrive they will wait for others to finish.
             Default in Solr/Lucene is 8. -->
        <maxIndexingThreads>8</maxIndexingThreads>

        <!-- Expert: Enabling compound file will use less files for the index,
             using fewer file descriptors on the expense of performance decrease.
             Default in Lucene is "true". Default in Solr is "false" (since 3.6) -->
        <!-- <useCompoundFile>false</useCompoundFile> -->

        <!-- ramBufferSizeMB sets the amount of RAM that may be used by Lucene
             indexing for buffering added documents and deletions before they are
             flushed to the Directory.
             maxBufferedDocs sets a limit on the number of documents buffered
             before flushing.
             If both ramBufferSizeMB and maxBufferedDocs is set, then
             Lucene will flush based on whichever limit is hit first.
             The default is 100 MB.  -->
        <!-- <ramBufferSizeMB>100</ramBufferSizeMB> -->
        <!-- <maxBufferedDocs>1000</maxBufferedDocs> -->

        <!-- Expert: Merge Policy
             The Merge Policy in Lucene controls how merging of segments is done.
             The default since Solr/Lucene 3.3 is TieredMergePolicy.
             The default since Lucene 2.3 was the LogByteSizeMergePolicy,
             Even older versions of Lucene used LogDocMergePolicy.
          -->
        <!--
            <mergePolicy class="org.apache.lucene.index.TieredMergePolicy">
              <int name="maxMergeAtOnce">10</int>
              <int name="segmentsPerTier">10</int>
            </mergePolicy>
          -->

        <!-- Merge Factor
             The merge factor controls how many segments will get merged at a time.
             For TieredMergePolicy, mergeFactor is a convenience parameter which
             will set both MaxMergeAtOnce and SegmentsPerTier at once.
             For LogByteSizeMergePolicy, mergeFactor decides how many new segments
             will be allowed before they are merged into one.
             Default is 10 for both merge policies.
          -->
        <!--
        <mergeFactor>10</mergeFactor>
          -->

        <!-- Expert: Merge Scheduler
             The Merge Scheduler in Lucene controls how merges are
             performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
             can perform merges in the background using separate threads.
             The SerialMergeScheduler (Lucene 2.2 default) does not.
         -->
        <!--
           <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>
           -->

        <!-- LockFactory

             This option specifies which Lucene LockFactory implementation
             to use.

             single = SingleInstanceLockFactory - suggested for a
                      read-only index or when there is no possibility of
                      another process trying to modify the index.
             native = NativeFSLockFactory - uses OS native file locking.
                      Do not use when multiple solr webapps in the same
                      JVM are attempting to share a single index.
             simple = SimpleFSLockFactory  - uses a plain file for locking

             Defaults: 'native' is default for Solr3.6 and later, otherwise
                       'simple' is the default

             More details on the nuances of each LockFactory...
             http://wiki.apache.org/lucene-java/AvailableLockFactories
        -->
        <lockType>${solr.lock.type:simple}</lockType>


        <!-- Unlock On Startup

             If true, unlock any held write or commit locks on startup.
             This defeats the locking mechanism that allows multiple
             processes to safely access a lucene index, and should be used
             with care. Default is "false".

             This is not needed if lock type is 'single'
         -->

        <!--<unlockOnStartup>false</unlockOnStartup>-->


        <!-- Expert: Controls how often Lucene loads terms into memory
             Default is 128 and is likely good for most everyone.
          -->
        <!-- <termIndexInterval>128</termIndexInterval> -->

        <!--<reopenReaders>false</reopenReaders>-->

        <!-- If true, IndexReaders will be opened/reopened from the IndexWriter
             instead of from the Directory. Hosts in a master/slave setup
             should have this set to false while those in a SolrCloud
             cluster need to be set to true. Default: true
          -->
        <!--
        <nrtMode>true</nrtMode>
          -->

        <!-- Commit Deletion Policy
             Custom deletion policies can be specified here. The class must
             implement org.apache.lucene.index.IndexDeletionPolicy.

             The default Solr IndexDeletionPolicy implementation supports
             deleting index commit points on number of commits, age of
             commit point and optimized status.

             The latest commit point should always be preserved regardless
             of the criteria.
        -->
        <!--
        <deletionPolicy class="solr.SolrDeletionPolicy">
        -->
        <!-- The number of commit points to be kept -->
        <!-- <str name="maxCommitsToKeep">1</str> -->
        <!-- The number of optimized commit points to be kept -->
        <!-- <str name="maxOptimizedCommitsToKeep">0</str> -->
        <!--
            Delete all commit points once they have reached the given age.
            Supports DateMathParser syntax e.g.
          -->
        <!--
           <str name="maxCommitAge">30MINUTES</str>
           <str name="maxCommitAge">1DAY</str>
        -->
        <!--
        </deletionPolicy>
        -->

        <!-- Lucene Infostream

             To aid in advanced debugging, Lucene provides an "InfoStream"
             of detailed information when indexing.

             Setting the value to true will instruct the underlying Lucene
             IndexWriter to write its info stream to solr's log. By default,
             this is enabled here, and controlled through log4j.properties.
          -->
        <infoStream>true</infoStream>

        <!--
            Use true to enable this safety check, which can help
            reduce the risk of propagating index corruption from older segments
            into new ones, at the expense of slower merging.
        -->
        <!-- <checkIntegrityAtMerge>false</checkIntegrityAtMerge> -->
    </indexConfig>

    <!-- Common parameters for the custom search handlers -->
    <initParams path="/search,/facets,/fulltext,/query,/select">
        <lst name="defaults">
            <str name="omitHeader">false</str>
            <str name="echoParams">all</str>
            <str name="wt">json</str>
            <int name="timeAllowed">25000</int>
        </lst>
    </initParams>


    <!-- JMX

         This example enables JMX if and only if an existing MBeanServer
         is found, use this if you want to configure JMX through JVM
         parameters. Remove this to disable exposing Solr configuration
         and statistics to JMX.

         For more details see http://wiki.apache.org/solr/SolrJmx
      -->
    <jmx/>
    <!-- If you want to connect to a particular server, specify the
         agentId
      -->
    <!-- <jmx agentId="myAgent" /> -->
    <!-- If you want to start a new MBeanServer, specify the serviceUrl -->
    <!-- <jmx serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr"/>
      -->

    <!-- The default high-performance update handler -->
    <updateHandler class="solr.DirectUpdateHandler2">

        <!-- Enables a transaction log, used for real-time get, durability, and
             and solr cloud replica recovery.  The log can grow as big as
             uncommitted changes to the index, so use of a hard autoCommit
             is recommended (see below).
             "dir" - the target directory for transaction logs, defaults to the
                    solr data directory.  -->
        <updateLog>
            <str name="dir">${solr.ulog.dir:}</str>
        </updateLog>

        <!-- AutoCommit

             Perform a hard commit automatically under certain conditions.
             Instead of enabling autoCommit, consider using "commitWithin"
             when adding documents.

             http://wiki.apache.org/solr/UpdateXmlMessages

             maxDocs - Maximum number of documents to add since the last
                       commit before automatically triggering a new commit.

             maxTime - Maximum amount of time in ms that is allowed to pass
                       since a document was added before automatically
                       triggering a new commit.
             openSearcher - if false, the commit causes recent index changes
               to be flushed to stable storage, but does not cause a new
               searcher to be opened to make those changes visible.

             If the updateLog is enabled, then it's highly recommended to
             have some sort of hard autoCommit to limit the log size.
          -->
        <autoCommit>
            <maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
            <openSearcher>false</openSearcher>
        </autoCommit>

        <!-- softAutoCommit is like autoCommit except it causes a
             'soft' commit which only ensures that changes are visible
             but does not ensure that data is synced to disk.  This is
             faster and more near-realtime friendly than a hard commit.
          -->

        <!--    <autoSoftCommit>
              <maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>
            </autoSoftCommit>
        -->
        <autoSoftCommit>
            <maxTime>1000</maxTime>
        </autoSoftCommit>

        <!-- Update Related Event Listeners

             Various IndexWriter related events can trigger Listeners to
             take actions.

             postCommit - fired after every commit or optimize command
             postOptimize - fired after every optimize command
          -->
        <!-- The RunExecutableListener executes an external command from a
             hook such as postCommit or postOptimize.

             exe - the name of the executable to run
             dir - dir to use as the current working directory. (default=".")
             wait - the calling thread waits until the executable returns.
                    (default="true")
             args - the arguments to pass to the program.  (default is none)
             env - environment variables to set.  (default is none)
          -->
        <!-- This example shows how RunExecutableListener could be used
             with the script based replication...
             http://wiki.apache.org/solr/CollectionDistribution
          -->
        <!--
           <listener event="postCommit" class="solr.RunExecutableListener">
             <str name="exe">solr/bin/snapshooter</str>
             <str name="dir">.</str>
             <bool name="wait">true</bool>
             <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
             <arr name="env"> <str>MYVAR=val1</str> </arr>
           </listener>
          -->

    </updateHandler>

    <!-- IndexReaderFactory

         Use the following format to specify a custom IndexReaderFactory,
         which allows for alternate IndexReader implementations.

         ** Experimental Feature **

         Please note - Using a custom IndexReaderFactory may prevent
         certain other features from working. The API to
         IndexReaderFactory may change without warning or may even be
         removed from future releases if the problems cannot be
         resolved.


         ** Features that may not work with custom IndexReaderFactory **

         The ReplicationHandler assumes a disk-resident index. Using a
         custom IndexReader implementation may cause incompatibility
         with ReplicationHandler and may cause replication to not work
         correctly. See SOLR-1366 for details.

      -->
    <!--
    <indexReaderFactory name="IndexReaderFactory" class="package.class">
      <str name="someArg">Some Value</str>
    </indexReaderFactory >
    -->
    <!-- By explicitly declaring the Factory, the termIndexDivisor can
         be specified.
      -->
    <!--
       <indexReaderFactory name="IndexReaderFactory"
                           class="solr.StandardIndexReaderFactory">
         <int name="setTermIndexDivisor">12</int>
       </indexReaderFactory >
      -->

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         Query section - these settings control query time things like caches
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <query>
        <!-- Max Boolean Clauses

             Maximum number of clauses in each BooleanQuery,  an exception
             is thrown if exceeded.

             ** WARNING **

             This option actually modifies a global Lucene property that
             will affect all SolrCores.  If multiple solrconfig.xml files
             disagree on this property, the value at any given moment will
             be based on the last SolrCore to be initialized.

          -->
        <!--<maxBooleanClauses>1024</maxBooleanClauses>-->
        <maxBooleanClauses>20000</maxBooleanClauses>

        <!-- Solr Internal Query Caches

             There are two implementations of cache available for Solr,
             LRUCache, based on a synchronized LinkedHashMap, and
             FastLRUCache, based on a ConcurrentHashMap.

             FastLRUCache has faster gets and slower puts in single
             threaded operation and thus is generally faster than LRUCache
             when the hit ratio of the cache is high (> 75%), and may be
             faster under other scenarios on multi-cpu systems.
        -->

        <!-- Filter Cache

             Cache used by SolrIndexSearcher for filters (DocSets),
             unordered sets of *all* documents that match a query.  When a
             new searcher is opened, its caches may be prepopulated or
             "autowarmed" using data from caches in the old searcher.
             autowarmCount is the number of items to prepopulate.  For
             LRUCache, the autowarmed items will be the most recently
             accessed items.

             Parameters:
               class - the SolrCache implementation LRUCache or
                   (LRUCache or FastLRUCache)
               size - the maximum number of entries in the cache
               initialSize - the initial capacity (number of entries) of
                   the cache.  (see java.util.HashMap)
               autowarmCount - the number of entries to prepopulate from
                   and old cache.
          -->
        <filterCache class="solr.FastLRUCache"
                     size="512"
                     initialSize="512"
                     autowarmCount="0"/>

        <!-- Query Result Cache

             Caches results of searches - ordered lists of document ids
             (DocList) based on a query, a sort, and the range of documents requested.
          -->
        <queryResultCache class="solr.LRUCache"
                          size="512"
                          initialSize="512"
                          autowarmCount="0"/>

        <!-- Document Cache

             Caches Lucene Document objects (the stored fields for each
             document).  Since Lucene internal document ids are transient,
             this cache will not be autowarmed.
          -->
        <documentCache class="solr.LRUCache"
                       size="512"
                       initialSize="512"
                       autowarmCount="0"/>

        <!-- custom cache currently used by block join -->
        <cache name="perSegFilter"
               class="solr.search.LRUCache"
               size="10"
               initialSize="0"
               autowarmCount="10"
               regenerator="solr.NoOpRegenerator"/>

        <!-- Field Value Cache

             Cache used to hold field values that are quickly accessible
             by document id.  The fieldValueCache is created by default
             even if not configured here.
          -->
        <!--
           <fieldValueCache class="solr.FastLRUCache"
                            size="512"
                            autowarmCount="128"
                            showItems="32" />
          -->

        <!-- Custom Cache

             Example of a generic cache.  These caches may be accessed by
             name through SolrIndexSearcher.getCache(),cacheLookup(), and
             cacheInsert().  The purpose is to enable easy caching of
             user/application level data.  The regenerator argument should
             be specified as an implementation of solr.CacheRegenerator
             if autowarming is desired.
          -->
        <!--
           <cache name="myUserCache"
                  class="solr.LRUCache"
                  size="4096"
                  initialSize="1024"
                  autowarmCount="1024"
                  regenerator="com.mycompany.MyRegenerator"
                  />
          -->


        <!-- Lazy Field Loading

             If true, stored fields that are not requested will be loaded
             lazily.  This can result in a significant speed improvement
             if the usual case is to not load all stored fields,
             especially if the skipped fields are large compressed text
             fields.
        -->
        <enableLazyFieldLoading>true</enableLazyFieldLoading>

        <!-- Use Filter For Sorted Query

             A possible optimization that attempts to use a filter to
             satisfy a search.  If the requested sort does not include
             score, then the filterCache will be checked for a filter
             matching the query. If found, the filter will be used as the
             source of document ids, and then the sort will be applied to
             that.

             For most situations, this will not be useful unless you
             frequently get the same search repeatedly with different sort
             options, and none of them ever use "score"
          -->
        <!--
           <useFilterForSortedQuery>true</useFilterForSortedQuery>
          -->

        <!-- Result Window Size

             An optimization for use with the queryResultCache.  When a search
             is requested, a superset of the requested number of document ids
             are collected.  For example, if a search for a particular query
             requests matching documents 10 through 19, and queryWindowSize is 50,
             then documents 0 through 49 will be collected and cached.  Any further
             requests in that range can be satisfied via the cache.
          -->
        <queryResultWindowSize>20</queryResultWindowSize>

        <!-- Maximum number of documents to cache for any entry in the
             queryResultCache.
          -->
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

        <!-- Query Related Event Listeners

             Various IndexSearcher related events can trigger Listeners to
             take actions.

             newSearcher - fired whenever a new searcher is being prepared
             and there is a current searcher handling requests (aka
             registered).  It can be used to prime certain caches to
             prevent long request times for certain requests.

             firstSearcher - fired whenever a new searcher is being
             prepared but there is no current registered searcher to handle
             requests or to gain autowarming data from.


          -->
        <!-- QuerySenderListener takes an array of NamedList and executes a
             local query request for each NamedList in sequence.
          -->
        <listener event="newSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <!--
                   <lst><str name="q">solr</str><str name="sort">price asc</str></lst>
                   <lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
                  -->
            </arr>
        </listener>
        <listener event="firstSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <lst>
                    <str name="q">static firstSearcher warming in solrconfig.xml</str>
                </lst>
            </arr>
        </listener>

        <!-- Use Cold Searcher

             If a search request comes in and there is no current
             registered searcher, then immediately register the still
             warming searcher and use it.  If "false" then all requests
             will block until the first searcher is done warming.
          -->
        <useColdSearcher>false</useColdSearcher>

        <!-- Max Warming Searchers

             Maximum number of searchers that may be warming in the
             background concurrently.  An error is returned if this limit
             is exceeded.

             Recommend values of 1-2 for read-only slaves, higher for
             masters w/o cache warming.
          -->
        <maxWarmingSearchers>2</maxWarmingSearchers>

    </query>


    <!-- Request Dispatcher

         This section contains instructions for how the SolrDispatchFilter
         should behave when processing requests for this SolrCore.

         handleSelect is a legacy option that affects the behavior of requests
         such as /select?qt=XXX

         handleSelect="true" will cause the SolrDispatchFilter to process
         the request and dispatch the query to a handler specified by the
         "qt" param, assuming "/select" isn't already registered.

         handleSelect="false" will cause the SolrDispatchFilter to
         ignore "/select" requests, resulting in a 404 unless a handler
         is explicitly registered with the name "/select"

         handleSelect="true" is not recommended for new users, but is the default
         for backwards compatibility
      -->
    <requestDispatcher handleSelect="false">
        <!-- Request Parsing

             These settings indicate how Solr Requests may be parsed, and
             what restrictions may be placed on the ContentStreams from
             those requests

             enableRemoteStreaming - enables use of the stream.file
             and stream.url parameters for specifying remote streams.

             multipartUploadLimitInKB - specifies the max size (in KiB) of
             Multipart File Uploads that Solr will allow in a Request.

             formdataUploadLimitInKB - specifies the max size (in KiB) of
             form data (application/x-www-form-urlencoded) sent via
             POST. You can use POST to pass request parameters not
             fitting into the URL.

             addHttpRequestToContext - if set to true, it will instruct
             the requestParsers to include the original HttpServletRequest
             object in the context map of the SolrQueryRequest under the
             key "httpRequest". It will not be used by any of the existing
             Solr components, but may be useful when developing custom
             plugins.

             *** WARNING ***
             The settings below authorize Solr to fetch remote files, You
             should make sure your system has some authentication before
             using enableRemoteStreaming="true"

          -->
        <requestParsers enableRemoteStreaming="true"
                        multipartUploadLimitInKB="2048000"
                        formdataUploadLimitInKB="2048"
                        addHttpRequestToContext="false"/>

        <!-- HTTP Caching

             Set HTTP caching related parameters (for proxy caches and clients).

             The options below instruct Solr not to output any HTTP Caching
             related headers
          -->
        <httpCaching never304="true"/>
        <!-- If you include a <cacheControl> directive, it will be used to
             generate a Cache-Control header (as well as an Expires header
             if the value contains "max-age=")

             By default, no Cache-Control header is generated.

             You can use the <cacheControl> option even if you have set
             never304="true"
          -->
        <!--
           <httpCaching never304="true" >
             <cacheControl>max-age=30, public</cacheControl>
           </httpCaching>
          -->
        <!-- To enable Solr to respond with automatically generated HTTP
             Caching headers, and to response to Cache Validation requests
             correctly, set the value of never304="false"

             This will cause Solr to generate Last-Modified and ETag
             headers based on the properties of the Index.

             The following options can also be specified to affect the
             values of these headers...

             lastModFrom - the default value is "openTime" which means the
             Last-Modified value (and validation against If-Modified-Since
             requests) will all be relative to when the current Searcher
             was opened.  You can change it to lastModFrom="dirLastMod" if
             you want the value to exactly correspond to when the physical
             index was last modified.

             etagSeed="..." is an option you can change to force the ETag
             header (and validation against If-None-Match requests) to be
             different even if the index has not changed (ie: when making
             significant changes to your config file)

             (lastModifiedFrom and etagSeed are both ignored if you use
             the never304="true" option)
          -->
        <!--
           <httpCaching lastModifiedFrom="openTime"
                        etagSeed="Solr">
             <cacheControl>max-age=30, public</cacheControl>
           </httpCaching>
          -->
    </requestDispatcher>

    <!-- Request Handlers

         http://wiki.apache.org/solr/SolrRequestHandler

         Incoming queries will be dispatched to a specific handler by name
         based on the path specified in the request.

         Legacy behavior: If the request path uses "/select" but no Request
         Handler has that name, and if handleSelect="true" has been specified in
         the requestDispatcher, then the Request Handler is dispatched based on
         the qt parameter.  Handlers without a leading '/' are accessed this way
         like so: http://host/app/[core/]select?qt=name  If no qt is
         given, then the requestHandler that declares default="true" will be
         used or the one named "standard".

         If a Request Handler is declared with startup="lazy", then it will
         not be initialized until the first request that uses it.

      -->
    <!-- SearchHandler

         http://wiki.apache.org/solr/SearchHandler

         For processing Search Queries, the primary Request Handler
         provided with Solr is "SearchHandler" It delegates to a sequent
         of SearchComponents (see below) and supports distributed
         queries across multiple shards
      -->

    <requestHandler name="/facets" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <int name="rows">0</int>
            <str name="df">default</str>
            <str name="q.op">AND</str>

            <str name="facet">on</str>
            <str name="facet.field">dc</str>
            <str name="facet.field">docstrct</str>
            <str name="facet.field">lang</str>
            <str name="facet.field">genre</str>
            <str name="facet.field">yearpublish</str>
            <str name="facet.field">facetperson</str>
            <str name="facet.field">facetcreator</str>
            <str name="facet.field">facetpublisher</str>
            <str name="facet.field">facetplacepublish</str>

            <str name="facet.limit">5</str>

        </lst>
    </requestHandler>

    <requestHandler name="/feed" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="wt">xslt</str>
            <str name="tr">atom.xsl</str>
            <str name="fl">pid,purl,title,creator,dateindexed,datemodified</str>
            <str name="sort">dateindexed desc</str>
            <int name="rows">25</int>
            <str name="q">title:* AND (creator:* OR publisher:*)</str>
        </lst>
    </requestHandler>

    <requestHandler name="/mods" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="wt">xslt</str>
            <str name="tr">xmlpassthrough.xsl</str>
            <str name="fl">pid,purl,datemodified,dateindexed,mods</str>
            <int name="rows">10</int>
            <str name="df">default</str>
            <str name="q.op">AND</str>
        </lst>
    </requestHandler>

    <requestHandler name="/fulltext" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <int name="rows">10</int>
            <str name="df">fulltext</str>
            <str name="q.op">AND</str>
        </lst>
    </requestHandler>

    <requestHandler name="/select" class="solr.SearchHandler">
        <!-- default values for query parameters can be specified, these
             will be overridden by parameters in the request
          -->
        <lst name="defaults">
            <!--<str name="echoParams">explicit</str>-->
            <str name="echoParams">all</str>
            <int name="rows">10</int>
            <str name="df">default</str>
            <str name="q.op">AND</str>
            <str name="hl">true</str>
            <str name="hl.snippets">10</str>
            <str name="hl.fragsize">10</str>
            <str name="hl.fl">p_1,p_2,p_3,p_4,p_5,p_6,p_7,p_8,p_9,p_10,p_11,p_12,p_13,p_14,p_15,p_16,p_17,p_18,p_19,p_20,p_21,p_22,p_23,p_24,p_25,p_26,p_27,p_28,p_29,p_30,p_31,p_32,p_33,p_34,p_35,p_36,p_37,p_38,p_39,p_40,p_41,p_42,p_43,p_44,p_45,p_46,p_47,p_48,p_49,p_50,p_51,p_52,p_53,p_54,p_55,p_56,p_57,p_58,p_59,p_60,p_61,p_62,p_63,p_64,p_65,p_66,p_67,p_68,p_69,p_70,p_71,p_72,p_73,p_74,p_75,p_76,p_77,p_78,p_79,p_80,p_81,p_82,p_83,p_84,p_85,p_86,p_87,p_88,p_89,p_90,p_91,p_92,p_93,p_94,p_95,p_96,p_97,p_98,p_99,p_100,p_101,p_102,p_103,p_104,p_105,p_106,p_107,p_108,p_109,p_110,p_111,p_112,p_113,p_114,p_115,p_116,p_117,p_118,p_119,p_120,p_121,p_122,p_123,p_124,p_125,p_126,p_127,p_128,p_129,p_130,p_131,p_132,p_133,p_134,p_135,p_136,p_137,p_138,p_139,p_140,p_141,p_142,p_143,p_144,p_145,p_146,p_147,p_148,p_149,p_150,p_151,p_152,p_153,p_154,p_155,p_156,p_157,p_158,p_159,p_160,p_161,p_162,p_163,p_164,p_165,p_166,p_167,p_168,p_169,p_170,p_171,p_172,p_173,p_174,p_175,p_176,p_177,p_178,p_179,p_180,p_181,p_182,p_183,p_184,p_185,p_186,p_187,p_188,p_189,p_190,p_191,p_192,p_193,p_194,p_195,p_196,p_197,p_198,p_199,p_200,p_201,p_202,p_203,p_204,p_205,p_206,p_207,p_208,p_209,p_210,p_211,p_212,p_213,p_214,p_215,p_216,p_217,p_218,p_219,p_220,p_221,p_222,p_223,p_224,p_225,p_226,p_227,p_228,p_229,p_230,p_231,p_232,p_233,p_234,p_235,p_236,p_237,p_238,p_239,p_240,p_241,p_242,p_243,p_244,p_245,p_246,p_247,p_248,p_249,p_250,p_251,p_252,p_253,p_254,p_255,p_256,p_257,p_258,p_259,p_260,p_261,p_262,p_263,p_264,p_265,p_266,p_267,p_268,p_269,p_270,p_271,p_272,p_273,p_274,p_275,p_276,p_277,p_278,p_279,p_280,p_281,p_282,p_283,p_284,p_285,p_286,p_287,p_288,p_289,p_290,p_291,p_292,p_293,p_294,p_295,p_296,p_297,p_298,p_299,p_300,p_301,p_302,p_303,p_304,p_305,p_306,p_307,p_308,p_309,p_310,p_311,p_312,p_313,p_314,p_315,p_316,p_317,p_318,p_319,p_320,p_321,p_322,p_323,p_324,p_325,p_326,p_327,p_328,p_329,p_330,p_331,p_332,p_333,p_334,p_335,p_336,p_337,p_338,p_339,p_340,p_341,p_342,p_343,p_344,p_345,p_346,p_347,p_348,p_349,p_350,p_351,p_352,p_353,p_354,p_355,p_356,p_357,p_358,p_359,p_360,p_361,p_362,p_363,p_364,p_365,p_366,p_367,p_368,p_369,p_370,p_371,p_372,p_373,p_374,p_375,p_376,p_377,p_378,p_379,p_380,p_381,p_382,p_383,p_384,p_385,p_386,p_387,p_388,p_389,p_390,p_391,p_392,p_393,p_394,p_395,p_396,p_397,p_398,p_399,p_400,p_401,p_402,p_403,p_404,p_405,p_406,p_407,p_408,p_409,p_410,p_411,p_412,p_413,p_414,p_415,p_416,p_417,p_418,p_419,p_420,p_421,p_422,p_423,p_424,p_425,p_426,p_427,p_428,p_429,p_430,p_431,p_432,p_433,p_434,p_435,p_436,p_437,p_438,p_439,p_440,p_441,p_442,p_443,p_444,p_445,p_446,p_447,p_448,p_449,p_450,p_451,p_452,p_453,p_454,p_455,p_456,p_457,p_458,p_459,p_460,p_461,p_462,p_463,p_464,p_465,p_466,p_467,p_468,p_469,p_470,p_471,p_472,p_473,p_474,p_475,p_476,p_477,p_478,p_479,p_480,p_481,p_482,p_483,p_484,p_485,p_486,p_487,p_488,p_489,p_490,p_491,p_492,p_493,p_494,p_495,p_496,p_497,p_498,p_499,p_500,p_501,p_502,p_503,p_504,p_505,p_506,p_507,p_508,p_509,p_510,p_511,p_512,p_513,p_514,p_515,p_516,p_517,p_518,p_519,p_520,p_521,p_522,p_523,p_524,p_525,p_526,p_527,p_528,p_529,p_530,p_531,p_532,p_533,p_534,p_535,p_536,p_537,p_538,p_539,p_540,p_541,p_542,p_543,p_544,p_545,p_546,p_547,p_548,p_549,p_550,p_551,p_552,p_553,p_554,p_555,p_556,p_557,p_558,p_559,p_560,p_561,p_562,p_563,p_564,p_565,p_566,p_567,p_568,p_569,p_570,p_571,p_572,p_573,p_574,p_575,p_576,p_577,p_578,p_579,p_580,p_581,p_582,p_583,p_584,p_585,p_586,p_587,p_588,p_589,p_590,p_591,p_592,p_593,p_594,p_595,p_596,p_597,p_598,p_599,p_600,p_601,p_602,p_603,p_604,p_605,p_606,p_607,p_608,p_609,p_610,p_611,p_612,p_613,p_614,p_615,p_616,p_617,p_618,p_619,p_620,p_621,p_622,p_623,p_624,p_625,p_626,p_627,p_628,p_629,p_630,p_631,p_632,p_633,p_634,p_635,p_636,p_637,p_638,p_639,p_640,p_641,p_642,p_643,p_644,p_645,p_646,p_647,p_648,p_649,p_650,p_651,p_652,p_653,p_654,p_655,p_656,p_657,p_658,p_659,p_660,p_661,p_662,p_663,p_664,p_665,p_666,p_667,p_668,p_669,p_670,p_671,p_672,p_673,p_674,p_675,p_676,p_677,p_678,p_679,p_680,p_681,p_682,p_683,p_684,p_685,p_686,p_687,p_688,p_689,p_690,p_691,p_692,p_693,p_694,p_695,p_696,p_697,p_698,p_699,p_700,p_701,p_702,p_703,p_704,p_705,p_706,p_707,p_708,p_709,p_710,p_711,p_712,p_713,p_714,p_715,p_716,p_717,p_718,p_719,p_720,p_721,p_722,p_723,p_724,p_725,p_726,p_727,p_728,p_729,p_730,p_731,p_732,p_733,p_734,p_735,p_736,p_737,p_738,p_739,p_740,p_741,p_742,p_743,p_744,p_745,p_746,p_747,p_748,p_749,p_750,p_751,p_752,p_753,p_754,p_755,p_756,p_757,p_758,p_759,p_760,p_761,p_762,p_763,p_764,p_765,p_766,p_767,p_768,p_769,p_770,p_771,p_772,p_773,p_774,p_775,p_776,p_777,p_778,p_779,p_780,p_781,p_782,p_783,p_784,p_785,p_786,p_787,p_788,p_789,p_790,p_791,p_792,p_793,p_794,p_795,p_796,p_797,p_798,p_799,p_800,p_801,p_802,p_803,p_804,p_805,p_806,p_807,p_808,p_809,p_810,p_811,p_812,p_813,p_814,p_815,p_816,p_817,p_818,p_819,p_820,p_821,p_822,p_823,p_824,p_825,p_826,p_827,p_828,p_829,p_830,p_831,p_832,p_833,p_834,p_835,p_836,p_837,p_838,p_839,p_840,p_841,p_842,p_843,p_844,p_845,p_846,p_847,p_848,p_849,p_850,p_851,p_852,p_853,p_854,p_855,p_856,p_857,p_858,p_859,p_860,p_861,p_862,p_863,p_864,p_865,p_866,p_867,p_868,p_869,p_870,p_871,p_872,p_873,p_874,p_875,p_876,p_877,p_878,p_879,p_880,p_881,p_882,p_883,p_884,p_885,p_886,p_887,p_888,p_889,p_890,p_891,p_892,p_893,p_894,p_895,p_896,p_897,p_898,p_899,p_900,p_901,p_902,p_903,p_904,p_905,p_906,p_907,p_908,p_909,p_910,p_911,p_912,p_913,p_914,p_915,p_916,p_917,p_918,p_919,p_920,p_921,p_922,p_923,p_924,p_925,p_926,p_927,p_928,p_929,p_930,p_931,p_932,p_933,p_934,p_935,p_936,p_937,p_938,p_939,p_940,p_941,p_942,p_943,p_944,p_945,p_946,p_947,p_948,p_949,p_950,p_951,p_952,p_953,p_954,p_955,p_956,p_957,p_958,p_959,p_960,p_961,p_962,p_963,p_964,p_965,p_966,p_967,p_968,p_969,p_970,p_971,p_972,p_973,p_974,p_975,p_976,p_977,p_978,p_979,p_980,p_981,p_982,p_983,p_984,p_985,p_986,p_987,p_988,p_989,p_990,p_991,p_992,p_993,p_994,p_995,p_996,p_997,p_998,p_999,p_1000,p_1001,p_1002,p_1003,p_1004,p_1005,p_1006,p_1007,p_1008,p_1009,p_1010,p_1011,p_1012,p_1013,p_1014,p_1015,p_1016,p_1017,p_1018,p_1019,p_1020,p_1021,p_1022,p_1023,p_1024,p_1025,p_1026,p_1027,p_1028,p_1029,p_1030,p_1031,p_1032,p_1033,p_1034,p_1035,p_1036,p_1037,p_1038,p_1039,p_1040,p_1041,p_1042,p_1043,p_1044,p_1045,p_1046,p_1047,p_1048,p_1049,p_1050,p_1051,p_1052,p_1053,p_1054,p_1055,p_1056,p_1057,p_1058,p_1059,p_1060,p_1061,p_1062,p_1063,p_1064,p_1065,p_1066,p_1067,p_1068,p_1069,p_1070,p_1071,p_1072,p_1073,p_1074,p_1075,p_1076,p_1077,p_1078,p_1079,p_1080,p_1081,p_1082,p_1083,p_1084,p_1085,p_1086,p_1087,p_1088,p_1089,p_1090,p_1091,p_1092,p_1093,p_1094,p_1095,p_1096,p_1097,p_1098,p_1099,p_1100,p_1101,p_1102,p_1103,p_1104,p_1105,p_1106,p_1107,p_1108,p_1109,p_1110,p_1111,p_1112,p_1113,p_1114,p_1115,p_1116,p_1117,p_1118,p_1119,p_1120,p_1121,p_1122,p_1123,p_1124,p_1125,p_1126,p_1127,p_1128,p_1129,p_1130,p_1131,p_1132,p_1133,p_1134,p_1135,p_1136,p_1137,p_1138,p_1139,p_1140,p_1141,p_1142,p_1143,p_1144,p_1145,p_1146,p_1147,p_1148,p_1149,p_1150,p_1151,p_1152,p_1153,p_1154,p_1155,p_1156,p_1157,p_1158,p_1159,p_1160,p_1161,p_1162,p_1163,p_1164,p_1165,p_1166,p_1167,p_1168,p_1169,p_1170,p_1171,p_1172,p_1173,p_1174,p_1175,p_1176,p_1177,p_1178,p_1179,p_1180,p_1181,p_1182,p_1183,p_1184,p_1185,p_1186,p_1187,p_1188,p_1189,p_1190,p_1191,p_1192,p_1193,p_1194,p_1195,p_1196,p_1197,p_1198,p_1199,p_1200,p_1201,p_1202,p_1203,p_1204,p_1205,p_1206,p_1207,p_1208,p_1209,p_1210,p_1211,p_1212,p_1213,p_1214,p_1215,p_1216,p_1217,p_1218,p_1219,p_1220,p_1221,p_1222,p_1223,p_1224,p_1225,p_1226,p_1227,p_1228,p_1229,p_1230,p_1231,p_1232,p_1233,p_1234,p_1235,p_1236,p_1237,p_1238,p_1239,p_1240,p_1241,p_1242,p_1243,p_1244,p_1245,p_1246,p_1247,p_1248,p_1249,p_1250,p_1251,p_1252,p_1253,p_1254,p_1255,p_1256,p_1257,p_1258,p_1259,p_1260,p_1261,p_1262,p_1263,p_1264,p_1265,p_1266,p_1267,p_1268,p_1269,p_1270,p_1271,p_1272,p_1273,p_1274,p_1275,p_1276,p_1277,p_1278,p_1279,p_1280,p_1281,p_1282,p_1283,p_1284,p_1285,p_1286,p_1287,p_1288,p_1289,p_1290,p_1291,p_1292,p_1293,p_1294,p_1295,p_1296,p_1297,p_1298,p_1299,p_1300,p_1301,p_1302,p_1303,p_1304,p_1305,p_1306,p_1307,p_1308,p_1309,p_1310,p_1311,p_1312,p_1313,p_1314,p_1315,p_1316,p_1317,p_1318,p_1319,p_1320,p_1321,p_1322,p_1323,p_1324,p_1325,p_1326,p_1327,p_1328,p_1329,p_1330,p_1331,p_1332,p_1333,p_1334,p_1335,p_1336,p_1337,p_1338,p_1339,p_1340,p_1341,p_1342,p_1343,p_1344,p_1345,p_1346,p_1347,p_1348,p_1349,p_1350,p_1351,p_1352,p_1353,p_1354,p_1355,p_1356,p_1357,p_1358,p_1359,p_1360,p_1361,p_1362,p_1363,p_1364,p_1365,p_1366,p_1367,p_1368,p_1369,p_1370,p_1371,p_1372,p_1373,p_1374,p_1375,p_1376,p_1377,p_1378,p_1379,p_1380,p_1381,p_1382,p_1383,p_1384,p_1385,p_1386,p_1387,p_1388,p_1389,p_1390,p_1391,p_1392,p_1393,p_1394,p_1395,p_1396,p_1397,p_1398,p_1399,p_1400,p_1401,p_1402,p_1403,p_1404,p_1405,p_1406,p_1407,p_1408,p_1409,p_1410,p_1411,p_1412,p_1413,p_1414,p_1415,p_1416,p_1417,p_1418,p_1419,p_1420,p_1421,p_1422,p_1423,p_1424,p_1425,p_1426,p_1427,p_1428,p_1429,p_1430,p_1431,p_1432,p_1433,p_1434,p_1435,p_1436,p_1437,p_1438,p_1439,p_1440,p_1441,p_1442,p_1443,p_1444,p_1445,p_1446,p_1447,p_1448,p_1449,p_1450,p_1451,p_1452,p_1453,p_1454,p_1455,p_1456,p_1457,p_1458,p_1459,p_1460,p_1461,p_1462,p_1463,p_1464,p_1465,p_1466,p_1467,p_1468,p_1469,p_1470,p_1471,p_1472,p_1473,p_1474,p_1475,p_1476,p_1477,p_1478,p_1479,p_1480,p_1481,p_1482,p_1483,p_1484,p_1485,p_1486,p_1487,p_1488,p_1489,p_1490,p_1491,p_1492,p_1493,p_1494,p_1495,p_1496,p_1497,p_1498,p_1499,p_1500,p_1501,p_1502,p_1503,p_1504,p_1505,p_1506,p_1507,p_1508,p_1509,p_1510,p_1511,p_1512,p_1513,p_1514,p_1515,p_1516,p_1517,p_1518,p_1519,p_1520,p_1521,p_1522,p_1523,p_1524,p_1525,p_1526,p_1527,p_1528,p_1529,p_1530,p_1531,p_1532,p_1533,p_1534,p_1535,p_1536,p_1537,p_1538,p_1539,p_1540,p_1541,p_1542,p_1543,p_1544,p_1545,p_1546,p_1547,p_1548,p_1549,p_1550,p_1551,p_1552,p_1553,p_1554,p_1555,p_1556,p_1557,p_1558,p_1559,p_1560,p_1561,p_1562,p_1563,p_1564,p_1565,p_1566,p_1567,p_1568,p_1569,p_1570,p_1571,p_1572,p_1573,p_1574,p_1575,p_1576,p_1577,p_1578,p_1579,p_1580,p_1581,p_1582,p_1583,p_1584,p_1585,p_1586,p_1587,p_1588,p_1589,p_1590,p_1591,p_1592,p_1593,p_1594,p_1595,p_1596,p_1597,p_1598,p_1599,p_1600,p_1601,p_1602,p_1603,p_1604,p_1605,p_1606,p_1607,p_1608,p_1609,p_1610,p_1611,p_1612,p_1613,p_1614,p_1615,p_1616,p_1617,p_1618,p_1619,p_1620,p_1621,p_1622,p_1623,p_1624,p_1625,p_1626,p_1627,p_1628,p_1629,p_1630,p_1631,p_1632,p_1633,p_1634,p_1635,p_1636,p_1637,p_1638,p_1639,p_1640,p_1641,p_1642,p_1643,p_1644,p_1645,p_1646,p_1647,p_1648,p_1649,p_1650,p_1651,p_1652,p_1653,p_1654,p_1655,p_1656,p_1657,p_1658,p_1659,p_1660,p_1661,p_1662,p_1663,p_1664,p_1665,p_1666,p_1667,p_1668,p_1669,p_1670,p_1671,p_1672,p_1673,p_1674,p_1675,p_1676,p_1677,p_1678,p_1679,p_1680,p_1681,p_1682,p_1683,p_1684,p_1685,p_1686,p_1687,p_1688,p_1689,p_1690,p_1691,p_1692,p_1693,p_1694,p_1695,p_1696,p_1697,p_1698,p_1699,p_1700,p_1701,p_1702,p_1703,p_1704,p_1705,p_1706,p_1707,p_1708,p_1709,p_1710,p_1711,p_1712,p_1713,p_1714,p_1715,p_1716,p_1717,p_1718,p_1719,p_1720,p_1721,p_1722,p_1723,p_1724,p_1725,p_1726,p_1727,p_1728,p_1729,p_1730,p_1731,p_1732,p_1733,p_1734,p_1735,p_1736,p_1737,p_1738,p_1739,p_1740,p_1741,p_1742,p_1743,p_1744,p_1745,p_1746,p_1747,p_1748,p_1749,p_1750,p_1751,p_1752,p_1753,p_1754,p_1755,p_1756,p_1757,p_1758,p_1759,p_1760,p_1761,p_1762,p_1763,p_1764,p_1765,p_1766,p_1767,p_1768,p_1769,p_1770,p_1771,p_1772,p_1773,p_1774,p_1775,p_1776,p_1777,p_1778,p_1779,p_1780,p_1781,p_1782,p_1783,p_1784,p_1785,p_1786,p_1787,p_1788,p_1789,p_1790,p_1791,p_1792,p_1793,p_1794,p_1795,p_1796,p_1797,p_1798,p_1799,p_1800,p_1801,p_1802,p_1803,p_1804,p_1805,p_1806,p_1807,p_1808,p_1809,p_1810,p_1811,p_1812,p_1813,p_1814,p_1815,p_1816,p_1817,p_1818,p_1819,p_1820,p_1821,p_1822,p_1823,p_1824,p_1825,p_1826,p_1827,p_1828,p_1829,p_1830,p_1831,p_1832,p_1833,p_1834,p_1835,p_1836,p_1837,p_1838,p_1839,p_1840,p_1841,p_1842,p_1843,p_1844,p_1845,p_1846,p_1847,p_1848,p_1849,p_1850,p_1851,p_1852,p_1853,p_1854,p_1855,p_1856,p_1857,p_1858,p_1859,p_1860,p_1861,p_1862,p_1863,p_1864,p_1865,p_1866,p_1867,p_1868,p_1869,p_1870,p_1871,p_1872,p_1873,p_1874,p_1875,p_1876,p_1877,p_1878,p_1879,p_1880,p_1881,p_1882,p_1883,p_1884,p_1885,p_1886,p_1887,p_1888,p_1889,p_1890,p_1891,p_1892,p_1893,p_1894,p_1895,p_1896,p_1897,p_1898,p_1899,p_1900,p_1901,p_1902,p_1903,p_1904,p_1905,p_1906,p_1907,p_1908,p_1909,p_1910,p_1911,p_1912,p_1913,p_1914,p_1915,p_1916,p_1917,p_1918,p_1919,p_1920,p_1921,p_1922,p_1923,p_1924,p_1925,p_1926,p_1927,p_1928,p_1929,p_1930,p_1931,p_1932,p_1933,p_1934,p_1935,p_1936,p_1937,p_1938,p_1939,p_1940,p_1941,p_1942,p_1943,p_1944,p_1945,p_1946,p_1947,p_1948,p_1949,p_1950,p_1951,p_1952,p_1953,p_1954,p_1955,p_1956,p_1957,p_1958,p_1959,p_1960,p_1961,p_1962,p_1963,p_1964,p_1965,p_1966,p_1967,p_1968,p_1969,p_1970,p_1971,p_1972,p_1973,p_1974,p_1975,p_1976,p_1977,p_1978,p_1979,p_1980,p_1981,p_1982,p_1983,p_1984,p_1985,p_1986,p_1987,p_1988,p_1989,p_1990,p_1991,p_1992,p_1993,p_1994,p_1995,p_1996,p_1997,p_1998,p_1999,p_2000</str>
        </lst>
        <!-- In addition to defaults, "appends" params can be specified
             to identify values which should be appended to the list of
             multi-val params from the query (or the existing "defaults").
          -->
        <!-- In this example, the param "fq=instock:true" would be appended to
             any query time fq params the user may specify, as a mechanism for
             partitioning the index, independent of any user selected filtering
             that may also be desired (perhaps as a result of faceted searching).

             NOTE: there is *absolutely* nothing a client can do to prevent these
             "appends" values from being used, so don't use this mechanism
             unless you are sure you always want it.
          -->
        <!--
           <lst name="appends">
             <str name="fq">inStock:true</str>
           </lst>
          -->
        <!-- "invariants" are a way of letting the Solr maintainer lock down
             the options available to Solr clients.  Any params values
             specified here are used regardless of what values may be specified
             in either the query, the "defaults", or the "appends" params.

             In this example, the facet.field and facet.query params would
             be fixed, limiting the facets clients can use.  Faceting is
             not turned on by default - but if the client does specify
             facet=true in the request, these are the only facets they
             will be able to see counts for; regardless of what other
             facet.field or facet.query params they may specify.

             NOTE: there is *absolutely* nothing a client can do to prevent these
             "invariants" values from being used, so don't use this mechanism
             unless you are sure you always want it.
          -->
        <!--
           <lst name="invariants">
             <str name="facet.field">cat</str>
             <str name="facet.field">manu_exact</str>
             <str name="facet.query">price:[* TO 500]</str>
             <str name="facet.query">price:[500 TO *]</str>
           </lst>
          -->
        <!-- If the default list of SearchComponents is not desired, that
             list can either be overridden completely, or components can be
             prepended or appended to the default list.  (see below)
          -->
        <!--
           <arr name="components">
             <str>nameOfCustomComponent1</str>
             <str>nameOfCustomComponent2</str>
           </arr>
          -->
    </requestHandler>

    <!-- A request handler that returns indented JSON by default -->
    <requestHandler name="/query" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="wt">json</str>
            <str name="indent">true</str>
            <str name="df">default</str>
            <str name="q.op">AND</str>
        </lst>
    </requestHandler>


    <!-- realtime get handler, guaranteed to return the latest stored fields of
         any document, without the need to commit or open a new searcher.  The
         current implementation relies on the updateLog feature being enabled.

         ** WARNING **
         Do NOT disable the realtime get handler at /get if you are using
         SolrCloud otherwise any leader election will cause a full sync in ALL
         replicas for the shard in question. Similarly, a replica recovery will
         also always fetch the complete index from the leader because a partial
         sync will not be possible in the absence of this handler.
    -->
    <requestHandler name="/get" class="solr.RealTimeGetHandler">
        <lst name="defaults">
            <str name="omitHeader">true</str>
            <str name="wt">json</str>
            <str name="indent">true</str>
        </lst>
    </requestHandler>

    <!--
      The export request handler is used to export full sorted result sets.
      Do not change these defaults.
    -->

    <requestHandler name="/export" class="solr.SearchHandler">
        <lst name="invariants">
            <str name="rq">{!xport}</str>
            <str name="wt">xsort</str>
            <str name="distrib">false</str>
        </lst>

        <arr name="components">
            <str>query</str>
        </arr>
    </requestHandler>


    <!-- A Robust Example

         This example SearchHandler declaration shows off usage of the
         SearchHandler with many defaults declared

         Note that multiple instances of the same Request Handler
         (SearchHandler) can be registered multiple times with different
         names (and different init parameters)
      -->
    <requestHandler name="/browse" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>

            <!-- VelocityResponseWriter settings -->
            <str name="wt">velocity</str>
            <str name="v.template">browse</str>
            <str name="v.layout">layout</str>
            <str name="title">Solritas</str>

            <!-- Query settings -->
            <str name="defType">edismax</str>
            <str name="qf">
                text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4
                title^10.0 description^5.0 keywords^5.0 author^2.0 resourcename^1.0
            </str>
            <str name="df">text</str>
            <str name="mm">100%</str>
            <str name="q.alt">*:*</str>
            <str name="rows">10</str>
            <str name="fl">*,score</str>

            <str name="mlt.qf">
                text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4
                title^10.0 description^5.0 keywords^5.0 author^2.0 resourcename^1.0
            </str>
            <str name="mlt.fl">text,features,name,sku,id,manu,cat,title,description,keywords,author,resourcename</str>
            <int name="mlt.count">3</int>

            <!-- Faceting defaults -->
            <str name="facet">on</str>
            <str name="facet.missing">true</str>
            <str name="facet.field">cat</str>
            <str name="facet.field">manu_exact</str>
            <str name="facet.field">content_type</str>
            <str name="facet.field">author_s</str>
            <str name="facet.query">ipod</str>
            <str name="facet.query">GB</str>
            <str name="facet.mincount">1</str>
            <str name="facet.pivot">cat,inStock</str>
            <str name="facet.range.other">after</str>
            <str name="facet.range">price</str>
            <int name="f.price.facet.range.start">0</int>
            <int name="f.price.facet.range.end">600</int>
            <int name="f.price.facet.range.gap">50</int>
            <str name="facet.range">popularity</str>
            <int name="f.popularity.facet.range.start">0</int>
            <int name="f.popularity.facet.range.end">10</int>
            <int name="f.popularity.facet.range.gap">3</int>
            <str name="facet.range">manufacturedate_dt</str>
            <str name="f.manufacturedate_dt.facet.range.start">NOW/YEAR-10YEARS</str>
            <str name="f.manufacturedate_dt.facet.range.end">NOW</str>
            <str name="f.manufacturedate_dt.facet.range.gap">+1YEAR</str>
            <str name="f.manufacturedate_dt.facet.range.other">before</str>
            <str name="f.manufacturedate_dt.facet.range.other">after</str>

            <!-- Highlighting defaults -->
            <str name="hl">on</str>
            <str name="hl.fl">content features title name</str>
            <str name="hl.preserveMulti">true</str>
            <str name="hl.encoder">html</str>
            <str name="hl.simple.pre">
                <b/>
            </str>
            <str name="hl.simple.post">
                <b/>
            </str>
            <str name="f.title.hl.fragsize">0</str>
            <str name="f.title.hl.alternateField">title</str>
            <str name="f.name.hl.fragsize">0</str>
            <str name="f.name.hl.alternateField">name</str>
            <str name="f.content.hl.snippets">3</str>
            <str name="f.content.hl.fragsize">200</str>
            <str name="f.content.hl.alternateField">content</str>
            <str name="f.content.hl.maxAlternateFieldLength">750</str>

            <!-- Spell checking defaults -->
            <str name="spellcheck">on</str>
            <str name="spellcheck.extendedResults">false</str>
            <str name="spellcheck.count">5</str>
            <str name="spellcheck.alternativeTermCount">2</str>
            <str name="spellcheck.maxResultsForSuggest">5</str>
            <str name="spellcheck.collate">true</str>
            <str name="spellcheck.collateExtendedResults">true</str>
            <str name="spellcheck.maxCollationTries">5</str>
            <str name="spellcheck.maxCollations">3</str>
        </lst>

        <!-- append spellchecking to our list of components -->
        <arr name="last-components">
            <str>spellcheck</str>
        </arr>
    </requestHandler>


    <!-- Update Request Handler.

         http://wiki.apache.org/solr/UpdateXmlMessages

         The canonical Request Handler for Modifying the Index through
         commands specified using XML, JSON, CSV, or JAVABIN

         Note: Since solr1.1 requestHandlers requires a valid content
         type header if posted in the body. For example, curl now
         requires: -H 'Content-type:text/xml; charset=utf-8'

         To override the request content type and force a specific
         Content-type, use the request parameter:
           ?update.contentType=text/csv

         This handler will pick a response format to match the input
         if the 'wt' parameter is not explicit
      -->
    <requestHandler name="/update" class="solr.UpdateRequestHandler">
        <!-- See below for information on defining
             updateRequestProcessorChains that can be used by name
             on each Update Request
          -->
        <!--
           <lst name="defaults">
             <str name="update.chain">dedupe</str>
           </lst>
           -->
    </requestHandler>

    <!-- The following are implicitly added
    <requestHandler name="/update/json" class="solr.UpdateRequestHandler">
          <lst name="defaults">
           <str name="stream.contentType">application/json</str>
         </lst>
    </requestHandler>
    <requestHandler name="/update/csv" class="solr.UpdateRequestHandler">
          <lst name="defaults">
           <str name="stream.contentType">application/csv</str>
         </lst>
    </requestHandler>
    -->

    <!-- Solr Cell Update Request Handler

         http://wiki.apache.org/solr/ExtractingRequestHandler

      -->
    <requestHandler name="/update/extract"
                    startup="lazy"
                    class="solr.extraction.ExtractingRequestHandler">
        <lst name="defaults">
            <str name="lowernames">true</str>
            <str name="uprefix">ignored_</str>

            <!-- capture link hrefs but ignore div attributes -->
            <str name="captureAttr">true</str>
            <str name="fmap.a">links</str>
            <str name="fmap.div">ignored_</str>
        </lst>
    </requestHandler>


    <!-- Field Analysis Request Handler

         RequestHandler that provides much the same functionality as
         analysis.jsp. Provides the ability to specify multiple field
         types and field names in the same request and outputs
         index-time and query-time analysis for each of them.

         Request parameters are:
         analysis.fieldname - field name whose analyzers are to be used

         analysis.fieldtype - field type whose analyzers are to be used
         analysis.fieldvalue - text for index-time analysis
         q (or analysis.q) - text for query time analysis
         analysis.showmatch (true|false) - When set to true and when
             query analysis is performed, the produced tokens of the
             field value analysis will be marked as "matched" for every
             token that is produces by the query analysis
     -->
    <requestHandler name="/analysis/field"
                    startup="lazy"
                    class="solr.FieldAnalysisRequestHandler"/>


    <!-- Document Analysis Handler

         http://wiki.apache.org/solr/AnalysisRequestHandler

         An analysis handler that provides a breakdown of the analysis
         process of provided documents. This handler expects a (single)
         content stream with the following format:

         <docs>
           <doc>
             <field name="id">1</field>
             <field name="name">The Name</field>
             <field name="text">The Text Value</field>
           </doc>
           <doc>...</doc>
           <doc>...</doc>
           ...
         </docs>

      Note: Each document must contain a field which serves as the
      unique key. This key is used in the returned response to associate
      an analysis breakdown to the analyzed document.

      Like the FieldAnalysisRequestHandler, this handler also supports
      query analysis by sending either an "analysis.query" or "q"
      request parameter that holds the query text to be analyzed. It
      also supports the "analysis.showmatch" parameter which when set to
      true, all field tokens that match the query tokens will be marked
      as a "match".
    -->
    <requestHandler name="/analysis/document"
                    class="solr.DocumentAnalysisRequestHandler"
                    startup="lazy"/>

    <!-- Admin Handlers

         Admin Handlers - This will register all the standard admin
         RequestHandlers.
      -->
    <!--<requestHandler name="/admin/"
                    class="solr.admin.AdminHandlers"/>-->
    <!-- This single handler is equivalent to the following... -->
    <!--
       <requestHandler name="/admin/luke"       class="solr.admin.LukeRequestHandler" />
       <requestHandler name="/admin/system"     class="solr.admin.SystemInfoHandler" />
       <requestHandler name="/admin/plugins"    class="solr.admin.PluginInfoHandler" />
       <requestHandler name="/admin/threads"    class="solr.admin.ThreadDumpHandler" />
       <requestHandler name="/admin/properties" class="solr.admin.PropertiesRequestHandler" />
       <requestHandler name="/admin/file"       class="solr.admin.ShowFileRequestHandler" >
      -->
    <!-- If you wish to hide files under ${solr.home}/conf, explicitly
         register the ShowFileRequestHandler using the definition below.
         NOTE: The glob pattern ('*') is the only pattern supported at present, *.xml will
               not exclude all files ending in '.xml'. Use it to exclude _all_ updates
      -->
    <!--
       <requestHandler name="/admin/file"
                       class="solr.admin.ShowFileRequestHandler" >
         <lst name="invariants">
           <str name="hidden">synonyms.txt</str>
           <str name="hidden">anotherfile.txt</str>
           <str name="hidden">*</str>
         </lst>
       </requestHandler>
      -->

    <!-- ping/healthcheck -->
    <requestHandler name="/admin/ping" class="solr.PingRequestHandler">
        <lst name="invariants">
            <str name="q">solrpingquery</str>
        </lst>
        <lst name="defaults">
            <str name="echoParams">all</str>
        </lst>
        <!-- An optional feature of the PingRequestHandler is to configure the
             handler with a "healthcheckFile" which can be used to enable/disable
             the PingRequestHandler.
             relative paths are resolved against the data dir
          -->
        <!-- <str name="healthcheckFile">server-enabled.txt</str> -->
    </requestHandler>

    <!-- Echo the request contents back to the client -->
    <requestHandler name="/debug/dump" class="solr.DumpRequestHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="echoHandler">true</str>
        </lst>
    </requestHandler>

    <!-- Solr Replication

         The SolrReplicationHandler supports replicating indexes from a
         "master" used for indexing and "slaves" used for queries.

         http://wiki.apache.org/solr/SolrReplication

         It is also necessary for SolrCloud to function (in Cloud mode, the
         replication handler is used to bulk transfer segments when nodes
         are added or need to recover).

         https://wiki.apache.org/solr/SolrCloud/
      -->
    <requestHandler name="/replication" class="solr.ReplicationHandler">
        <!--
           To enable simple master/slave replication, uncomment one of the
           sections below, depending on whether this solr instance should be
           the "master" or a "slave".  If this instance is a "slave" you will
           also need to fill in the masterUrl to point to a real machine.
        -->
        <!--
           <lst name="master">
             <str name="replicateAfter">commit</str>
             <str name="replicateAfter">startup</str>
             <str name="confFiles">schema.xml,stopwords.txt</str>
           </lst>
        -->
        <!--
           <lst name="slave">
             <str name="masterUrl">http://your-master-hostname:8983/solr</str>
             <str name="pollInterval">00:00:60</str>
           </lst>
        -->
    </requestHandler>

    <!-- Search Components

         Search components are registered to SolrCore and used by
         instances of SearchHandler (which can access them by name)

         By default, the following components are available:

         <searchComponent name="query"     class="solr.QueryComponent" />
         <searchComponent name="facet"     class="solr.FacetComponent" />
         <searchComponent name="mlt"       class="solr.MoreLikeThisComponent" />
         <searchComponent name="highlight" class="solr.HighlightComponent" />
         <searchComponent name="stats"     class="solr.StatsComponent" />
         <searchComponent name="debug"     class="solr.DebugComponent" />

         Default configuration in a requestHandler would look like:

         <arr name="components">
           <str>query</str>
           <str>facet</str>
           <str>mlt</str>
           <str>highlight</str>
           <str>stats</str>
           <str>debug</str>
         </arr>

         If you register a searchComponent to one of the standard names,
         that will be used instead of the default.

         To insert components before or after the 'standard' components, use:

         <arr name="first-components">
           <str>myFirstComponentName</str>
         </arr>

         <arr name="last-components">
           <str>myLastComponentName</str>
         </arr>

         NOTE: The component registered with the name "debug" will
         always be executed after the "last-components"

       -->

    <!-- Spell Check

         The spell check component can return a list of alternative spelling
         suggestions.

         http://wiki.apache.org/solr/SpellCheckComponent
      -->
    <searchComponent name="spellcheck" class="solr.SpellCheckComponent">

        <str name="queryAnalyzerFieldType">text_general</str>

        <!-- Multiple "Spell Checkers" can be declared and used by this
             component
          -->

        <!-- a spellchecker built from a field of the main index -->
        <lst name="spellchecker">
            <str name="name">default</str>
            <str name="field">text</str>
            <str name="classname">solr.DirectSolrSpellChecker</str>
            <!-- the spellcheck distance measure used, the default is the internal levenshtein -->
            <str name="distanceMeasure">internal</str>
            <!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
            <float name="accuracy">0.5</float>
            <!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
            <int name="maxEdits">2</int>
            <!-- the minimum shared prefix when enumerating terms -->
            <int name="minPrefix">1</int>
            <!-- maximum number of inspections per result. -->
            <int name="maxInspections">5</int>
            <!-- minimum length of a query term to be considered for correction -->
            <int name="minQueryLength">4</int>
            <!-- maximum threshold of documents a query term can appear to be considered for correction -->
            <float name="maxQueryFrequency">0.01</float>
            <!-- uncomment this to require suggestions to occur in 1% of the documents
                <float name="thresholdTokenFrequency">.01</float>
            -->
        </lst>

        <!-- a spellchecker that can break or combine words.  See "/spell" handler below for usage -->
        <lst name="spellchecker">
            <str name="name">wordbreak</str>
            <str name="classname">solr.WordBreakSolrSpellChecker</str>
            <str name="field">name</str>
            <str name="combineWords">true</str>
            <str name="breakWords">true</str>
            <int name="maxChanges">10</int>
        </lst>

        <!-- a spellchecker that uses a different distance measure -->
        <!--
           <lst name="spellchecker">
             <str name="name">jarowinkler</str>
             <str name="field">spell</str>
             <str name="classname">solr.DirectSolrSpellChecker</str>
             <str name="distanceMeasure">
               org.apache.lucene.search.spell.JaroWinklerDistance
             </str>
           </lst>
         -->

        <!-- a spellchecker that use an alternate comparator

             comparatorClass be one of:
              1. score (default)
              2. freq (Frequency first, then score)
              3. A fully qualified class name
          -->
        <!--
           <lst name="spellchecker">
             <str name="name">freq</str>
             <str name="field">lowerfilt</str>
             <str name="classname">solr.DirectSolrSpellChecker</str>
             <str name="comparatorClass">freq</str>
          -->

        <!-- A spellchecker that reads the list of words from a file -->
        <!--
           <lst name="spellchecker">
             <str name="classname">solr.FileBasedSpellChecker</str>
             <str name="name">file</str>
             <str name="sourceLocation">spellings.txt</str>
             <str name="characterEncoding">UTF-8</str>
             <str name="spellcheckIndexDir">spellcheckerFile</str>
           </lst>
          -->
    </searchComponent>

    <!-- A request handler for demonstrating the spellcheck component.

         NOTE: This is purely as an example.  The whole purpose of the
         SpellCheckComponent is to hook it into the request handler that
         handles your normal user queries so that a separate request is
         not needed to get suggestions.

         IN OTHER WORDS, THERE IS REALLY GOOD CHANCE THE SETUP BELOW IS
         NOT WHAT YOU WANT FOR YOUR PRODUCTION SYSTEM!

         See http://wiki.apache.org/solr/SpellCheckComponent for details
         on the request parameters.
      -->
    <requestHandler name="/spell" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <str name="df">text</str>
            <!-- Solr will use suggestions from both the 'default' spellchecker
                 and from the 'wordbreak' spellchecker and combine them.
                 collations (re-written queries) can include a combination of
                 corrections from both spellcheckers -->
            <str name="spellcheck.dictionary">default</str>
            <str name="spellcheck.dictionary">wordbreak</str>
            <str name="spellcheck">on</str>
            <str name="spellcheck.extendedResults">true</str>
            <str name="spellcheck.count">10</str>
            <str name="spellcheck.alternativeTermCount">5</str>
            <str name="spellcheck.maxResultsForSuggest">5</str>
            <str name="spellcheck.collate">true</str>
            <str name="spellcheck.collateExtendedResults">true</str>
            <str name="spellcheck.maxCollationTries">10</str>
            <str name="spellcheck.maxCollations">5</str>
        </lst>
        <arr name="last-components">
            <str>spellcheck</str>
        </arr>
    </requestHandler>

    <!-- This causes long startup times on big indexes, even when never used.  See SOLR-6679
    <searchComponent name="suggest" class="solr.SuggestComponent">
      <lst name="suggester">
        <str name="name">mySuggester</str>
        <str name="lookupImpl">FuzzyLookupFactory</str>
        <str name="dictionaryImpl">DocumentDictionaryFactory</str>
        <str name="field">cat</str>
        <str name="weightField">price</str>
        <str name="suggestAnalyzerFieldType">string</str>
      </lst>
    </searchComponent>

    <requestHandler name="/suggest" class="solr.SearchHandler" startup="lazy">
      <lst name="defaults">
        <str name="suggest">true</str>
        <str name="suggest.count">10</str>
      </lst>
      <arr name="components">
        <str>suggest</str>
      </arr>
    </requestHandler>
    -->

    <!-- Term Vector Component

         http://wiki.apache.org/solr/TermVectorComponent
      -->
    <searchComponent name="tvComponent" class="solr.TermVectorComponent"/>

    <!-- A request handler for demonstrating the term vector component

         This is purely as an example.

         In reality you will likely want to add the component to your
         already specified request handlers.
      -->
    <requestHandler name="/tvrh" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <str name="df">text</str>
            <bool name="tv">true</bool>
        </lst>
        <arr name="last-components">
            <str>tvComponent</str>
        </arr>
    </requestHandler>

    <!-- Clustering Component

         You'll need to set the solr.clustering.enabled system property
         when running solr to run with clustering enabled:

              java -Dsolr.clustering.enabled=true -jar start.jar

         http://wiki.apache.org/solr/ClusteringComponent
         http://carrot2.github.io/solr-integration-strategies/
      -->
    <searchComponent name="clustering"
                     enable="${solr.clustering.enabled:false}"
                     class="solr.clustering.ClusteringComponent">
        <lst name="engine">
            <str name="name">lingo</str>

            <!-- Class name of a clustering algorithm compatible with the Carrot2 framework.

                 Currently available open source algorithms are:
                 * org.carrot2.clustering.lingo.LingoClusteringAlgorithm
                 * org.carrot2.clustering.stc.STCClusteringAlgorithm
                 * org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm

                 See http://project.carrot2.org/algorithms.html for more information.

                 A commercial algorithm Lingo3G (needs to be installed separately) is defined as:
                 * com.carrotsearch.lingo3g.Lingo3GClusteringAlgorithm
              -->
            <str name="carrot.algorithm">org.carrot2.clustering.lingo.LingoClusteringAlgorithm</str>

            <!-- Override location of the clustering algorithm's resources
                 (attribute definitions and lexical resources).

                 A directory from which to load algorithm-specific stop words,
                 stop labels and attribute definition XMLs.

                 For an overview of Carrot2 lexical resources, see:
                 http://download.carrot2.org/head/manual/#chapter.lexical-resources

                 For an overview of Lingo3G lexical resources, see:
                 http://download.carrotsearch.com/lingo3g/manual/#chapter.lexical-resources
             -->
            <str name="carrot.resourcesDir">clustering/carrot2</str>
        </lst>

        <!-- An example definition for the STC clustering algorithm. -->
        <lst name="engine">
            <str name="name">stc</str>
            <str name="carrot.algorithm">org.carrot2.clustering.stc.STCClusteringAlgorithm</str>
        </lst>

        <!-- An example definition for the bisecting kmeans clustering algorithm. -->
        <lst name="engine">
            <str name="name">kmeans</str>
            <str name="carrot.algorithm">org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm</str>
        </lst>
    </searchComponent>

    <!-- A request handler for demonstrating the clustering component

         This is purely as an example.

         In reality you will likely want to add the component to your
         already specified request handlers.
      -->
    <requestHandler name="/clustering"
                    startup="lazy"
                    enable="${solr.clustering.enabled:false}"
                    class="solr.SearchHandler">
        <lst name="defaults">
            <bool name="clustering">true</bool>
            <bool name="clustering.results">true</bool>
            <!-- Field name with the logical "title" of a each document (optional) -->
            <str name="carrot.title">name</str>
            <!-- Field name with the logical "URL" of a each document (optional) -->
            <str name="carrot.url">id</str>
            <!-- Field name with the logical "content" of a each document (optional) -->
            <str name="carrot.snippet">features</str>
            <!-- Apply highlighter to the title/ content and use this for clustering. -->
            <bool name="carrot.produceSummary">true</bool>
            <!-- the maximum number of labels per cluster -->
            <!--<int name="carrot.numDescriptions">5</int>-->
            <!-- produce sub clusters -->
            <bool name="carrot.outputSubClusters">false</bool>

            <!-- Configure the remaining request handler parameters. -->
            <str name="defType">edismax</str>
            <str name="qf">
                text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4
            </str>
            <str name="q.alt">*:*</str>
            <str name="rows">10</str>
            <str name="fl">*,score</str>
        </lst>
        <arr name="last-components">
            <str>clustering</str>
        </arr>
    </requestHandler>

    <!-- Terms Component

         http://wiki.apache.org/solr/TermsComponent

         A component to return terms and document frequency of those
         terms
      -->
    <searchComponent name="terms" class="solr.TermsComponent"/>

    <!-- A request handler for demonstrating the terms component -->
    <requestHandler name="/terms" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <bool name="terms">true</bool>
            <bool name="distrib">false</bool>
        </lst>
        <arr name="components">
            <str>terms</str>
        </arr>
    </requestHandler>


    <!-- Query Elevation Component

         http://wiki.apache.org/solr/QueryElevationComponent

         a search component that enables you to configure the top
         results for a given query regardless of the normal lucene
         scoring.
      -->
    <searchComponent name="elevator" class="solr.QueryElevationComponent">
        <!-- pick a fieldType to analyze queries -->
        <str name="queryFieldType">string</str>
        <str name="config-file">elevate.xml</str>
    </searchComponent>

    <!-- A request handler for demonstrating the elevator component -->
    <requestHandler name="/elevate" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="df">text</str>
        </lst>
        <arr name="last-components">
            <str>elevator</str>
        </arr>
    </requestHandler>

    <!-- Highlighting Component

         http://wiki.apache.org/solr/HighlightingParameters
      -->
    <searchComponent class="solr.HighlightComponent" name="highlight">
        <highlighting>
            <!-- Configure the standard fragmenter -->
            <!-- This could most likely be commented out in the "default" case -->
            <fragmenter name="gap"
                        default="true"
                        class="solr.highlight.GapFragmenter">
                <lst name="defaults">
                    <int name="hl.fragsize">100</int>
                </lst>
            </fragmenter>

            <!-- A regular-expression-based fragmenter
                 (for sentence extraction)
              -->
            <fragmenter name="regex"
                        class="solr.highlight.RegexFragmenter">
                <lst name="defaults">
                    <!-- slightly smaller fragsizes work better because of slop -->
                    <int name="hl.fragsize">70</int>
                    <!-- allow 50% slop on fragment sizes -->
                    <float name="hl.regex.slop">0.5</float>
                    <!-- a basic sentence pattern -->
                    <str name="hl.regex.pattern">[-\w ,/\n\"']{20,200}</str>
                </lst>
            </fragmenter>

            <!-- Configure the standard formatter -->
            <formatter name="html"
                       default="true"
                       class="solr.highlight.HtmlFormatter">
                <lst name="defaults">
                    <str name="hl.simple.pre"><![CDATA[<em>]]></str>
                    <str name="hl.simple.post"><![CDATA[</em>]]></str>
                </lst>
            </formatter>

            <!-- Configure the standard encoder -->
            <encoder name="html"
                     class="solr.highlight.HtmlEncoder"/>

            <!-- Configure the standard fragListBuilder -->
            <fragListBuilder name="simple"
                             class="solr.highlight.SimpleFragListBuilder"/>

            <!-- Configure the single fragListBuilder -->
            <fragListBuilder name="single"
                             class="solr.highlight.SingleFragListBuilder"/>

            <!-- Configure the weighted fragListBuilder -->
            <fragListBuilder name="weighted"
                             default="true"
                             class="solr.highlight.WeightedFragListBuilder"/>

            <!-- default tag FragmentsBuilder -->
            <fragmentsBuilder name="default"
                              default="true"
                              class="solr.highlight.ScoreOrderFragmentsBuilder">
                <!--
                <lst name="defaults">
                  <str name="hl.multiValuedSeparatorChar">/</str>
                </lst>
                -->
            </fragmentsBuilder>

            <!-- multi-colored tag FragmentsBuilder -->
            <fragmentsBuilder name="colored"
                              class="solr.highlight.ScoreOrderFragmentsBuilder">
                <lst name="defaults">
                    <str name="hl.tag.pre"><![CDATA[
               <b style="background:yellow">,<b style="background:lawgreen">,
               <b style="background:aquamarine">,<b style="background:magenta">,
               <b style="background:palegreen">,<b style="background:coral">,
               <b style="background:wheat">,<b style="background:khaki">,
               <b style="background:lime">,<b style="background:deepskyblue">]]></str>
                    <str name="hl.tag.post"><![CDATA[</b>]]></str>
                </lst>
            </fragmentsBuilder>

            <boundaryScanner name="default"
                             default="true"
                             class="solr.highlight.SimpleBoundaryScanner">
                <lst name="defaults">
                    <str name="hl.bs.maxScan">10</str>
                    <str name="hl.bs.chars">.,!?

                    </str>
                </lst>
            </boundaryScanner>

            <boundaryScanner name="breakIterator"
                             class="solr.highlight.BreakIteratorBoundaryScanner">
                <lst name="defaults">
                    <!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
                    <str name="hl.bs.type">WORD</str>
                    <!-- language and country are used when constructing Locale object.  -->
                    <!-- And the Locale object will be used when getting instance of BreakIterator -->
                    <str name="hl.bs.language">en</str>
                    <str name="hl.bs.country">US</str>
                </lst>
            </boundaryScanner>
        </highlighting>
    </searchComponent>

    <!-- Update Processors

         Chains of Update Processor Factories for dealing with Update
         Requests can be declared, and then used by name in Update
         Request Processors

         http://wiki.apache.org/solr/UpdateRequestProcessor

      -->
    <!-- Deduplication

         An example dedup update processor that creates the "id" field
         on the fly based on the hash code of some other fields.  This
         example has overwriteDupes set to false since we are using the
         id field as the signatureField and Solr will maintain
         uniqueness based on that anyway.

      -->
    <!--
       <updateRequestProcessorChain name="dedupe">
         <processor class="solr.processor.SignatureUpdateProcessorFactory">
           <bool name="enabled">true</bool>
           <str name="signatureField">id</str>
           <bool name="overwriteDupes">false</bool>
           <str name="fields">name,features,cat</str>
           <str name="signatureClass">solr.processor.Lookup3Signature</str>
         </processor>
         <processor class="solr.LogUpdateProcessorFactory" />
         <processor class="solr.RunUpdateProcessorFactory" />
       </updateRequestProcessorChain>
      -->

    <!-- Language identification

         This example update chain identifies the language of the incoming
         documents using the langid contrib. The detected language is
         written to field language_s. No field name mapping is done.
         The fields used for detection are text, title, subject and description,
         making this example suitable for detecting languages form full-text
         rich documents injected via ExtractingRequestHandler.
         See more about langId at http://wiki.apache.org/solr/LanguageDetection
      -->
    <!--
     <updateRequestProcessorChain name="langid">
       <processor class="org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessorFactory">
         <str name="langid.fl">text,title,subject,description</str>
         <str name="langid.langField">language_s</str>
         <str name="langid.fallback">en</str>
       </processor>
       <processor class="solr.LogUpdateProcessorFactory" />
       <processor class="solr.RunUpdateProcessorFactory" />
     </updateRequestProcessorChain>
    -->

    <!-- Script update processor

      This example hooks in an update processor implemented using JavaScript.

      See more about the script update processor at http://wiki.apache.org/solr/ScriptUpdateProcessor
    -->
    <!--
      <updateRequestProcessorChain name="script">
        <processor class="solr.StatelessScriptUpdateProcessorFactory">
          <str name="script">update-script.js</str>
          <lst name="params">
            <str name="config_param">example config parameter</str>
          </lst>
        </processor>
        <processor class="solr.RunUpdateProcessorFactory" />
      </updateRequestProcessorChain>
    -->

    <!-- Response Writers

         http://wiki.apache.org/solr/QueryResponseWriter

         Request responses will be written using the writer specified by
         the 'wt' request parameter matching the name of a registered
         writer.

         The "default" writer is the default and will be used if 'wt' is
         not specified in the request.
      -->
    <!-- The following response writers are implicitly configured unless
         overridden...
      -->
    <!--
       <queryResponseWriter name="xml"
                            default="true"
                            class="solr.XMLResponseWriter" />
       <queryResponseWriter name="json" class="solr.JSONResponseWriter"/>
       <queryResponseWriter name="python" class="solr.PythonResponseWriter"/>
       <queryResponseWriter name="ruby" class="solr.RubyResponseWriter"/>
       <queryResponseWriter name="php" class="solr.PHPResponseWriter"/>
       <queryResponseWriter name="phps" class="solr.PHPSerializedResponseWriter"/>
       <queryResponseWriter name="csv" class="solr.CSVResponseWriter"/>
       <queryResponseWriter name="schema.xml" class="solr.SchemaXmlResponseWriter"/>
      -->

    <queryResponseWriter name="json" class="solr.JSONResponseWriter">
        <!-- For the purposes of the tutorial, JSON responses are written as
         plain text so that they are easy to read in *any* browser.
         If you expect a MIME type of "application/json" just remove this override.
        -->
        <str name="content-type">text/plain; charset=UTF-8</str>
    </queryResponseWriter>

    <!--
       Custom response writers can be declared as needed...
      -->
    <queryResponseWriter name="velocity" class="solr.VelocityResponseWriter" startup="lazy"/>


    <!-- XSLT response writer transforms the XML output by any xslt file found
         in Solr's conf/xslt directory.  Changes to xslt files are checked for
         every xsltCacheLifetimeSeconds.
      -->
    <queryResponseWriter name="xslt" class="solr.XSLTResponseWriter">
        <int name="xsltCacheLifetimeSeconds">5</int>
    </queryResponseWriter>

    <!-- Query Parsers

         http://wiki.apache.org/solr/SolrQuerySyntax

         Multiple QParserPlugins can be registered by name, and then
         used in either the "defType" param for the QueryComponent (used
         by SearchHandler) or in LocalParams
      -->
    <!-- example of registering a query parser -->
    <!--
       <queryParser name="myparser" class="com.mycompany.MyQParserPlugin"/>
      -->

    <!-- Function Parsers

         http://wiki.apache.org/solr/FunctionQuery

         Multiple ValueSourceParsers can be registered by name, and then
         used as function names when using the "func" QParser.
      -->
    <!-- example of registering a custom function parser  -->
    <!--
       <valueSourceParser name="myfunc"
                          class="com.mycompany.MyValueSourceParser" />
      -->


    <!-- Document Transformers
         http://wiki.apache.org/solr/DocTransformers
      -->
    <!--
       Could be something like:
       <transformer name="db" class="com.mycompany.LoadFromDatabaseTransformer" >
         <int name="connection">jdbc://....</int>
       </transformer>

       To add a constant value to all docs, use:
       <transformer name="mytrans2" class="org.apache.solr.response.transform.ValueAugmenterFactory" >
         <int name="value">5</int>
       </transformer>

       If you want the user to still be able to change it with _value:something_ use this:
       <transformer name="mytrans3" class="org.apache.solr.response.transform.ValueAugmenterFactory" >
         <double name="defaultValue">5</double>
       </transformer>

        If you are using the QueryElevationComponent, you may wish to mark documents that get boosted.  The
        EditorialMarkerFactory will do exactly that:
       <transformer name="qecBooster" class="org.apache.solr.response.transform.EditorialMarkerFactory" />
      -->


    <!-- Legacy config for the admin interface -->
    <admin>
        <defaultQuery>*:*</defaultQuery>
    </admin>

</config>